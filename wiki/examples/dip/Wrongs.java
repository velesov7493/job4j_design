/**
 * DIP - dependency invertion principle
 * 1. Модули верхнего уровня не должны зависеть от модулей нижнего уровня.
 * И те и другие должны зависеть от абстракций.
 * 2. Абстракции не должны зависеть от деталей. Наоборот: детали должны зависеть от абстракций
 * Это однозначно следует из сочетания OCP и LSP, поэтому Роберт Мартин
 * и не стал выделять DIP, как отдельный принцип.
 *
 * Этот принцип не означает, что обязательно все классы должны взаимодействовать только через интерфейсы.
 * Важно понимать, что DIP, как и другие принципы, применяется для упорядочивания процесса расширения функционала.
 * Если в данном конкретном месте расширять ничего не планируется, то и мягкие связи через интерфейс тоже не нужны.
 * В этом случае лишние интерфейсы будут напрасно раздувать и утяжелять код подобно лишним деталям-соединениям механизма.
 * Это примерно то же самое, что везде для соединения использовать болты и гайки. Даже там, где эффективнее
 * было бы просто приварить.
 */


public class A {

    public void method1() {}
}

public class B {

    // 1. Если A реализует какую-то логику, а не просто хранит данные, то
    // это нарушение DIP: метод возвращает объект класса, а не интерфейс.
    public A method2() {}
}

public class C {

    // 2. Аналогично (1)
    private A field1;
    // 3. Аналогично (1), только для класса B
    public void method3(B param1)
}