/*
* Open-closed principle
* Принцип открытости-закрытости
* "Программные сущности должны быть открыты к расширению, но закрыты к изменению"
* Означает, что уже работающий и проверенный код нельзя менять, но можно добавить к нему новый.
* Нарушение этого правила приводит к возникновению новых ошибок в уже отлаженном и работающем (до нарушения) коде.
* */

public class Wrongs {

    // 1. Ссылка на класс, а не на интерфейс
    // В будущем, при расшерении финкционала за счет создания наследников  или (с точки зрения этого класса)
    // дублеров AnotherClass1, этот класс не сможет с ними работать. Следовательно, его может понадобится изменить,
    // что уже является нарушением OCP
    private AnotherClass1 c;

    // 2. Метод возвращает класс, а не интерфейс
    // То же, что и (1), но для метода
    public AnotherClass2 getObject2() {
        return null;
    }

    // 3. В качестве аргумента в метод передается класс, а не интерфейс
    // То же, что и (1), но для метода
    public void doSomething(AnotherClass3 value) {
        return;
    }
}